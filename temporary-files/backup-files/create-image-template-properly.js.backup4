const dotenv = require('dotenv');
dotenv.config();

#!/usr/bin/env node

/**
 * Create WhatsApp Image Templates via Meta API
 * This properly uploads images and creates templates programmatically
 */

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const https = require('https');
const path = require('path');

class WhatsAppImageTemplateCreator {
    constructor() {
        this.config = {
            phoneNumberId: process.env.WHATSAPP_PHONE_NUMBER_ID,
            businessAccountId: process.env.WHATSAPP_BUSINESS_ACCOUNT_ID,
            bearerToken: 'EAATOFQtMe9gBPXrmwK1MDrvlBAWfbeevjzXs8PgT15GPsKADHmzJPWZBvnyhAYTjSfoAzOZC97CHQ27X6jE1iOjNZCehO2WrxPiEfRnhLO3sZA0iJ93Sh7ZB49ZBnF12CWCVTpB1WMfpRgpCdv5hXWIbWgzaHFovUPaZBQBDSa7p74ZCIKvZCtyLo3rj8dzDZAs74GaQZDZD',
            apiVersion: 'v18.0',
            appId: '1711247763011474' // From your token
        };
        
        // Sample images with correct dimensions (1200x628)
        this.sampleImages = {
            portfolio: 'https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=1200&h=628&fit=crop&q=80',
            tax: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=1200&h=628&fit=crop&q=80',
            retirement: 'https://images.unsplash.com/photo-1579621970563-ebec7560ff3e?w=1200&h=628&fit=crop&q=80'
        };
    }
    
    /**
     * Method 1: Upload image and get handle for template
     */
    async uploadImageAndGetHandle(imageUrl) {
        console.log('üì§ Uploading image to Meta servers...');
        
        try {
            // First, we need to upload via session-based upload
            const sessionResponse = await axios.post(
                `https://graph.facebook.com/${this.config.apiVersion}/${this.config.appId}/uploads`,
                {
                    file_length: 500000, // Approximate size
                    file_type: 'image/jpeg',
                    file_name: 'template_image.jpg'
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.config.bearerToken}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            if (sessionResponse.data.id) {
                console.log(`   ‚úÖ Upload session created: ${sessionResponse.data.id}`);
                return sessionResponse.data.id;
            }
        } catch (error) {
            console.log(`   ‚ùå Session creation failed: ${error.response?.data?.error?.message || error.message}`);
        }
        
        // Fallback: Return the direct URL as handle
        return imageUrl;
    }
    
    /**
     * Method 2: Create template with direct image URL in example
     */
    async createTemplateWithDirectUrl() {
        console.log('\nüìù Creating template with direct image URL...\n');
        
        const template = {
            name: 'wealth_visual_report',
            category: 'UTILITY',
            language: 'en_US',
            components: [
                {
                    type: 'HEADER',
                    format: 'IMAGE',
                    example: {
                        header_url: [this.sampleImages.portfolio] // Use header_url for direct URL
                    }
                },
                {
                    type: 'BODY',
                    text: 'Hi {{1}},\n\nYour {{2}} for {{3}}:\n\nValue: {{4}}\nPerformance: {{5}}\n\nTap below to view full report.',
                    example: {
                        body_text: [
                            ['Shruti', 'Portfolio Update', 'March 2024', '‚Çπ45,00,000', '+18.5%']
                        ]
                    }
                },
                {
                    type: 'FOOTER',
                    text: 'FinAdvise - Your Wealth Partner'
                }
            ]
        };
        
        return await this.submitTemplate(template);
    }
    
    /**
     * Method 3: Create simple image template
     */
    async createSimpleImageTemplate() {
        console.log('\nüìù Creating simple image template...\n');
        
        const template = {
            name: 'portfolio_image_simple',
            category: 'UTILITY',
            language: 'en_US',
            components: [
                {
                    type: 'HEADER',
                    format: 'IMAGE'
                    // No example for image header - let Meta handle it
                },
                {
                    type: 'BODY',
                    text: 'Hi {{1}}, your portfolio value is {{2}}. {{3}}',
                    example: {
                        body_text: [
                            ['Shruti', '‚Çπ45,00,000', 'Tap to view details']
                        ]
                    }
                }
            ]
        };
        
        return await this.submitTemplate(template);
    }
    
    /**
     * Method 4: Create template with uploaded media handle
     */
    async createTemplateWithMediaHandle() {
        console.log('\nüìù Creating template with media handle...\n');
        
        // First upload image to get media handle
        const handle = await this.uploadImageToMedia();
        
        if (!handle) {
            console.log('   ‚ùå Could not get media handle');
            return { success: false };
        }
        
        const template = {
            name: 'financial_chart_template',
            category: 'UTILITY',
            language: 'en_US',
            components: [
                {
                    type: 'HEADER',
                    format: 'IMAGE',
                    example: {
                        header_handle: [handle] // Use the uploaded media handle
                    }
                },
                {
                    type: 'BODY',
                    text: 'Dear {{1}},\n\n{{2}}\n\nCurrent: {{3}}\nTarget: {{4}}',
                    example: {
                        body_text: [
                            ['Investor', 'Monthly Performance Report', '‚Çπ45,00,000', '‚Çπ50,00,000']
                        ]
                    }
                }
            ]
        };
        
        return await this.submitTemplate(template);
    }
    
    /**
     * Upload image to WhatsApp Media API
     */
    async uploadImageToMedia() {
        console.log('   üì§ Uploading image to WhatsApp Media API...');
        
        // Download image first
        const imagePath = '/tmp/whatsapp_template_image.jpg';
        await this.downloadImage(this.sampleImages.portfolio, imagePath);
        
        try {
            const formData = new FormData();
            formData.append('messaging_product', 'whatsapp');
            formData.append('type', 'image');
            formData.append('file', fs.createReadStream(imagePath), {
                filename: 'template_image.jpg',
                contentType: 'image/jpeg'
            });
            
            const response = await axios.post(
                `https://graph.facebook.com/${this.config.apiVersion}/${this.config.phoneNumberId}/media`,
                formData,
                {
                    headers: {
                        'Authorization': `Bearer ${this.config.bearerToken}`,
                        ...formData.getHeaders()
                    },
                    maxContentLength: Infinity,
                    maxBodyLength: Infinity
                }
            );
            
            console.log(`   ‚úÖ Media uploaded! ID: ${response.data.id}`);
            
            // Clean up
            fs.unlinkSync(imagePath);
            
            return response.data.id;
            
        } catch (error) {
            console.log(`   ‚ùå Media upload failed: ${error.response?.data?.error?.message || error.message}`);
            
            // Clean up on error
            if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
            }
            
            return null;
        }
    }
    
    /**
     * Download image from URL
     */
    async downloadImage(url, dest) {
        return new Promise((resolve, reject) => {
            const file = fs.createWriteStream(dest);
            https.get(url, (response) => {
                response.pipe(file);
                file.on('finish', () => {
                    file.close();
                    console.log('   ‚úÖ Image downloaded');
                    resolve();
                });
            }).on('error', (err) => {
                fs.unlink(dest, () => {});
                reject(err);
            });
        });
    }
    
    /**
     * Submit template to Meta
     */
    async submitTemplate(template) {
        console.log(`üìù Submitting template: ${template.name}`);
        console.log(`   Category: ${template.category}`);
        console.log(`   Language: ${template.language}`);
        
        try {
            const response = await axios.post(
                `https://graph.facebook.com/${this.config.apiVersion}/${this.config.businessAccountId}/message_templates`,
                template,
                {
                    headers: {
                        'Authorization': `Bearer ${this.config.bearerToken}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            console.log(`   ‚úÖ Template submitted successfully!`);
            console.log(`   ID: ${response.data.id}`);
            console.log(`   Status: ${response.data.status || 'PENDING'}`);
            
            return { 
                success: true, 
                id: response.data.id,
                name: template.name,
                status: response.data.status
            };
            
        } catch (error) {
            const errorMsg = error.response?.data?.error?.message || error.message;
            
            if (errorMsg.includes('already exists')) {
                console.log(`   ‚ÑπÔ∏è Template already exists`);
                return await this.checkTemplateStatus(template.name);
            }
            
            console.log(`   ‚ùå Submission failed: ${errorMsg}`);
            
            // Log full error for debugging
            if (error.response?.data?.error?.error_user_msg) {
                console.log(`   Details: ${error.response.data.error.error_user_msg}`);
            }
            
            return { success: false, error: errorMsg };
        }
    }
    
    /**
     * Check template status
     */
    async checkTemplateStatus(templateName) {
        try {
            const response = await axios.get(
                `https://graph.facebook.com/${this.config.apiVersion}/${this.config.businessAccountId}/message_templates?name=${templateName}`,
                {
                    headers: {
                        'Authorization': `Bearer ${this.config.bearerToken}`
                    }
                }
            );
            
            if (response.data.data && response.data.data.length > 0) {
                const template = response.data.data[0];
                
                console.log(`   Status: ${template.status}`);
                
                // Check if it has image header
                const hasImage = template.components?.some(c => c.format === 'IMAGE');
                console.log(`   Has Image: ${hasImage ? 'Yes' : 'No'}`);
                
                if (template.status === 'REJECTED' && template.rejected_reason) {
                    console.log(`   Rejection Reason: ${template.rejected_reason}`);
                }
                
                return {
                    success: template.status === 'APPROVED',
                    status: template.status,
                    hasImage: hasImage,
                    name: templateName
                };
            }
        } catch (error) {
            console.log(`   Error checking status: ${error.message}`);
        }
        
        return { success: false };
    }
    
    /**
     * Try all methods to create image template
     */
    async createImageTemplates() {
        console.log('================================================');
        console.log('CREATING IMAGE TEMPLATES VIA META API');
        console.log('================================================\n');
        
        console.log('Image Specifications:');
        console.log('   ‚Ä¢ Dimensions: 1200 x 628 pixels');
        console.log('   ‚Ä¢ Format: JPEG');
        console.log('   ‚Ä¢ Category: UTILITY');
        console.log('   ‚Ä¢ Language: en_US\n');
        
        const results = [];
        
        // Try Method 1: Simple template without example
        console.log('METHOD 1: Simple Image Template');
        console.log('--------------------------------');
        const simple = await this.createSimpleImageTemplate();
        results.push({ method: 'Simple', ...simple });
        
        // Try Method 2: Direct URL in example
        console.log('\nMETHOD 2: Direct URL Template');
        console.log('--------------------------------');
        const directUrl = await this.createTemplateWithDirectUrl();
        results.push({ method: 'Direct URL', ...directUrl });
        
        // Try Method 3: Media Handle
        console.log('\nMETHOD 3: Media Handle Template');
        console.log('--------------------------------');
        const mediaHandle = await this.createTemplateWithMediaHandle();
        results.push({ method: 'Media Handle', ...mediaHandle });
        
        // Summary
        console.log('\n================================================');
        console.log('TEMPLATE CREATION SUMMARY');
        console.log('================================================\n');
        
        const successful = results.filter(r => r.success).length;
        const failed = results.filter(r => !r.success).length;
        
        console.log(`‚úÖ Successful: ${successful}`);
        console.log(`‚ùå Failed: ${failed}\n`);
        
        results.forEach(result => {
            if (result.success) {
                console.log(`‚úÖ ${result.method}: Template "${result.name}" created`);
                console.log(`   Status: ${result.status || 'PENDING APPROVAL'}`);
            } else {
                console.log(`‚ùå ${result.method}: Failed`);
                console.log(`   Error: ${result.error || 'Unknown error'}`);
            }
        });
        
        if (successful > 0) {
            console.log('\n‚è≥ NEXT STEPS:');
            console.log('   1. Templates submitted for Meta approval');
            console.log('   2. Approval typically takes 1-24 hours');
            console.log('   3. Once approved, images will send automatically');
            console.log('   4. Check status: node check-template-status.js');
        } else {
            console.log('\n‚ö†Ô∏è All template creation methods failed');
            console.log('   This may indicate account limitations or API changes');
        }
        
        return results;
    }
    
    /**
     * Send test message with image template
     */
    async testImageTemplate(templateName) {
        console.log(`\nüì± Testing template: ${templateName}`);
        
        const testData = {
            messaging_product: 'whatsapp',
            to: '919673758777', // Shruti
            type: 'template',
            template: {
                name: templateName,
                language: { code: 'en_US' },
                components: [
                    {
                        type: 'header',
                        parameters: [{
                            type: 'image',
                            image: {
                                link: this.sampleImages.portfolio
                            }
                        }]
                    },
                    {
                        type: 'body',
                        parameters: [
                            { type: 'text', text: 'Shruti' },
                            { type: 'text', text: 'Portfolio Update' },
                            { type: 'text', text: 'March 2024' },
                            { type: 'text', text: '‚Çπ45,00,000' },
                            { type: 'text', text: '+18.5%' }
                        ]
                    }
                ]
            }
        };
        
        try {
            const response = await axios.post(
                `https://graph.facebook.com/${this.config.apiVersion}/${this.config.phoneNumberId}/messages`,
                testData,
                {
                    headers: {
                        'Authorization': `Bearer ${this.config.bearerToken}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            console.log(`   ‚úÖ Message sent with image template!`);
            console.log(`   Message ID: ${response.data.messages[0].id}`);
            return true;
            
        } catch (error) {
            console.log(`   ‚ùå Failed to send: ${error.response?.data?.error?.message}`);
            return false;
        }
    }
}

// Execute
async function main() {
    const creator = new WhatsAppImageTemplateCreator();
    
    try {
        // Create templates
        const results = await creator.createImageTemplates();
        
        // Test if any were successful
        const successfulTemplate = results.find(r => r.success && r.name);
        if (successfulTemplate) {
            console.log('\nüß™ TESTING IMAGE TEMPLATE DELIVERY');
            console.log('===================================');
            await creator.testImageTemplate(successfulTemplate.name);
        }
        
    } catch (error) {
        console.error('\n‚ùå Error:', error.message);
        console.error(error.stack);
    }
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = WhatsAppImageTemplateCreator;