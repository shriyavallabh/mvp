// Export Service for conversation history
const PDFDocument = require('pdfkit');
const { Parser } = require('json2csv');

class ExportService {
    // Export conversation to PDF
    async exportToPDF(advisor, messages) {
        return new Promise((resolve, reject) => {
            try {
                const doc = new PDFDocument();
                const chunks = [];
                
                doc.on('data', chunk => chunks.push(chunk));
                doc.on('end', () => resolve(Buffer.concat(chunks)));
                
                // Add header
                doc.fontSize(20).text('WhatsApp Conversation Export', { align: 'center' });
                doc.moveDown();
                
                // Add advisor info
                doc.fontSize(14).text(`Advisor: ${advisor.name}`, { align: 'left' });
                doc.fontSize(12).text(`Phone: ${advisor.phone}`);
                doc.fontSize(12).text(`ARN: ${advisor.arn || 'N/A'}`);
                doc.fontSize(12).text(`Export Date: ${new Date().toLocaleString()}`);
                doc.moveDown();
                
                // Add conversation summary
                doc.fontSize(14).text('Conversation Summary', { underline: true });
                doc.fontSize(12).text(`Total Messages: ${messages.length}`);
                doc.fontSize(12).text(`Date Range: ${this.getDateRange(messages)}`);
                doc.moveDown();
                
                // Add messages
                doc.fontSize(14).text('Messages', { underline: true });
                doc.moveDown();
                
                let currentDate = null;
                
                messages.forEach(message => {
                    const messageDate = new Date(message.timestamp).toLocaleDateString();
                    
                    // Add date separator
                    if (messageDate !== currentDate) {
                        doc.moveDown();
                        doc.fontSize(12).fillColor('#666').text(messageDate, { align: 'center' });
                        doc.fillColor('#000');
                        doc.moveDown();
                        currentDate = messageDate;
                    }
                    
                    // Add message
                    const time = new Date(message.timestamp).toLocaleTimeString();
                    const sender = message.direction === 'sent' ? 'You' : advisor.name;
                    
                    doc.fontSize(10).fillColor('#666').text(`[${time}] ${sender}:`);
                    doc.fontSize(11).fillColor('#000');
                    
                    if (message.type === 'text') {
                        doc.text(message.content || '');
                    } else if (message.type === 'image') {
                        doc.fillColor('#007bff').text('[Image]', { link: message.media_url });
                        if (message.content) {
                            doc.fillColor('#000').text(message.content);
                        }
                    } else if (message.type === 'document') {
                        doc.fillColor('#007bff').text('[Document]', { link: message.media_url });
                        if (message.content) {
                            doc.fillColor('#000').text(message.content);
                        }
                    }
                    
                    // Add status for sent messages
                    if (message.direction === 'sent') {
                        doc.fontSize(9).fillColor('#999').text(`Status: ${message.status}`);
                    }
                    
                    doc.fillColor('#000');
                    doc.moveDown(0.5);
                });
                
                // Add footer
                doc.moveDown(2);
                doc.fontSize(10).fillColor('#666');
                doc.text('Generated by FinAdvise Message Center', { align: 'center' });
                doc.text('This export contains confidential information', { align: 'center' });
                
                doc.end();
            } catch (error) {
                reject(error);
            }
        });
    }
    
    // Export conversation to CSV
    async exportToCSV(advisor, messages) {
        try {
            const data = messages.map(msg => ({
                Date: new Date(msg.timestamp).toLocaleDateString(),
                Time: new Date(msg.timestamp).toLocaleTimeString(),
                Sender: msg.direction === 'sent' ? 'You' : advisor.name,
                Direction: msg.direction,
                Type: msg.type,
                Content: msg.content || '',
                MediaURL: msg.media_url || '',
                Status: msg.status,
                MessageID: msg.id
            }));
            
            const fields = ['Date', 'Time', 'Sender', 'Direction', 'Type', 'Content', 'MediaURL', 'Status', 'MessageID'];
            const parser = new Parser({ fields });
            const csv = parser.parse(data);
            
            // Add header
            const header = [
                `# WhatsApp Conversation Export`,
                `# Advisor: ${advisor.name}`,
                `# Phone: ${advisor.phone}`,
                `# Export Date: ${new Date().toISOString()}`,
                `# Total Messages: ${messages.length}`,
                '',
                csv
            ].join('\n');
            
            return header;
        } catch (error) {
            throw error;
        }
    }
    
    // Get date range for messages
    getDateRange(messages) {
        if (!messages || messages.length === 0) {
            return 'No messages';
        }
        
        const dates = messages.map(m => new Date(m.timestamp));
        const minDate = new Date(Math.min(...dates));
        const maxDate = new Date(Math.max(...dates));
        
        return `${minDate.toLocaleDateString()} - ${maxDate.toLocaleDateString()}`;
    }
    
    // Generate audit log
    async generateAuditLog(advisor, messages, userId) {
        const auditEntry = {
            timestamp: new Date().toISOString(),
            action: 'EXPORT_CONVERSATION',
            user_id: userId,
            advisor_id: advisor.id,
            advisor_name: advisor.name,
            message_count: messages.length,
            date_range: this.getDateRange(messages),
            ip_address: null, // To be filled from request
            user_agent: null  // To be filled from request
        };
        
        // Log to file or database
        console.log('Audit Log:', auditEntry);
        
        return auditEntry;
    }
    
    // Generate compliance report
    async generateComplianceReport(startDate, endDate) {
        // This would query the database for compliance metrics
        const report = {
            period: {
                start: startDate,
                end: endDate
            },
            metrics: {
                total_messages: 0,
                sent_messages: 0,
                received_messages: 0,
                failed_messages: 0,
                unique_advisors: 0,
                response_rate: 0,
                average_response_time: 0
            },
            compliance: {
                opt_ins: 0,
                opt_outs: 0,
                template_usage: 0,
                policy_violations: 0
            },
            exports: {
                total_exports: 0,
                export_by_format: {
                    pdf: 0,
                    csv: 0,
                    json: 0
                }
            }
        };
        
        return report;
    }
}

module.exports = new ExportService();